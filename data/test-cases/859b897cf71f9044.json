{"uid":"859b897cf71f9044","name":"Status Code 200 verification Collection","fullName":"Regression_Testing/scenario_based/collection#Status Code 200 verification Collection","historyId":"da2603c029d36b3abb6448d0f7c84ca2:e73dd70d5f5977cd852d33a62104475f","time":{"start":1736686069479,"stop":1736686070409,"duration":930},"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"failed","statusMessage":"Status code is 200","statusTrace":"Response code: 500, status: Internal Server Error","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"failed","statusMessage":"Status code is 200","statusTrace":"Response code: 500, status: Internal Server Error","steps":[{"name":"Status code is 200","time":{"start":1736686070401,"stop":1736686070401,"duration":0},"status":"failed","statusMessage":"expected response to have status code 200 but got 500","statusTrace":"AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:1)","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"627d0b84c0effb84","name":"Request Headers","source":"627d0b84c0effb84.json","type":"application/json","size":270},{"uid":"51b5ecccf951fdc5","name":"Response Headers","source":"51b5ecccf951fdc5.json","type":"application/json","size":258}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"newman"},{"name":"host","value":"fv-az2020-502"},{"name":"thread","value":"pid-1853-worker-main"},{"name":"parentSuite","value":"Regression_Testing"},{"name":"suite","value":"scenario_based"},{"name":"subSuite","value":"collection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"GET - https://www.rijksmuseum.nl/api/NL/collection?key=0fiuZFh4&p=0&ps=1"},{"name":"Response Code","value":"500"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"859b897cf71f9044.json","parameterValues":["GET - https://www.rijksmuseum.nl/api/NL/collection?key=0fiuZFh4&p=0&ps=1","500"]}