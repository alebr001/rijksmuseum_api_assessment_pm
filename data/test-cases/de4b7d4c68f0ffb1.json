{"uid":"de4b7d4c68f0ffb1","name":"Status Code 401 Invalid Key verification Collection","fullName":"Regression_Testing/scenario_based/collection#Status Code 401 Invalid Key verification Collection","historyId":"de538b2f02a8029f49325d05ffcd5052:01d13a4ea924e0d5cab704a491bd41d0","time":{"start":1736687505529,"stop":1736687505661,"duration":132},"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","steps":[{"name":"Status code is 401","time":{"start":1736687505658,"stop":1736687505658,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Body contains 'Invalid key'","time":{"start":1736687505659,"stop":1736687505659,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"12b5b3a4cba8b1ae","name":"Request Headers","source":"12b5b3a4cba8b1ae.json","type":"application/json","size":270},{"uid":"58636a990e72472b","name":"Response Headers","source":"58636a990e72472b.json","type":"application/json","size":444},{"uid":"74e174780f22252b","name":"Response Body","source":"74e174780f22252b.txt","type":"text/plain","size":11}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"newman"},{"name":"host","value":"fv-az1276-936"},{"name":"thread","value":"pid-1857-worker-main"},{"name":"parentSuite","value":"Regression_Testing"},{"name":"suite","value":"scenario_based"},{"name":"subSuite","value":"collection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"GET - https://www.rijksmuseum.nl/api/NL/collection?p=0&ps=1&key=%22wrongKey%22"},{"name":"Response Code","value":"401"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"de4b7d4c68f0ffb1.json","parameterValues":["GET - https://www.rijksmuseum.nl/api/NL/collection?p=0&ps=1&key=%22wrongKey%22","401"]}