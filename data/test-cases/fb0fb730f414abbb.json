{"uid":"fb0fb730f414abbb","name":"Status Code 401 Invalid Key verification Collection","fullName":"Regression_Testing/scenario_based/collection#Status Code 401 Invalid Key verification Collection","historyId":"de538b2f02a8029f49325d05ffcd5052:01d13a4ea924e0d5cab704a491bd41d0","time":{"start":1736692647468,"stop":1736692647878,"duration":410},"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","steps":[{"name":"Status code is 401","time":{"start":1736692647875,"stop":1736692647875,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Body contains 'Invalid key'","time":{"start":1736692647876,"stop":1736692647876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"c0bbe22f37eb0f0d","name":"Request Headers","source":"c0bbe22f37eb0f0d.json","type":"application/json","size":270},{"uid":"3693beb42214b208","name":"Response Headers","source":"3693beb42214b208.json","type":"application/json","size":444},{"uid":"4b68be0aa8dfc756","name":"Response Body","source":"4b68be0aa8dfc756.txt","type":"text/plain","size":11}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"newman"},{"name":"host","value":"fv-az1436-523"},{"name":"thread","value":"pid-1856-worker-main"},{"name":"parentSuite","value":"Regression_Testing"},{"name":"suite","value":"scenario_based"},{"name":"subSuite","value":"collection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"GET - https://www.rijksmuseum.nl/api/NL/collection?p=0&ps=1&key=%22wrongKey%22"},{"name":"Response Code","value":"401"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":3},"items":[{"uid":"d26eb9e8dc6307d4","reportUrl":"https://alebr001.github.io/rijksmuseum_api_assessment_pm/56//#testresult/d26eb9e8dc6307d4","status":"passed","time":{"start":1736692460297,"stop":1736692460416,"duration":119}},{"uid":"c5a94fd730b9c2f6","reportUrl":"https://alebr001.github.io/rijksmuseum_api_assessment_pm/56//#testresult/c5a94fd730b9c2f6","status":"passed","time":{"start":1736692151865,"stop":1736692151994,"duration":129}}]},"tags":[]},"source":"fb0fb730f414abbb.json","parameterValues":["GET - https://www.rijksmuseum.nl/api/NL/collection?p=0&ps=1&key=%22wrongKey%22","401"]}