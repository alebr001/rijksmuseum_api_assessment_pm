{
	"info": {
		"_postman_id": "9482a5c1-2796-482d-b60f-77858f0370d2",
		"name": "Regression_Testing",
		"description": "# About this collection\n\nThis collection helps ensure your API continues to work as expected after updates or changes. It contains sample requests for a series of tests that validate different aspects of an API, including:\n\n1. **Status code verification:** We'll check if the API returns the expected status codes for various requests, ensuring reliability and proper error handling.\n2. **JSON schema verification:** We'll make sure the JSON response conforms to a specified JSON Schema, ensuring API contracts are honored.\n3. **Response time verification:** We'll verify that the API's response time is within the acceptable range, providing a smooth user experience and optimizing performance.\n4. **Response body verification:** We'll validate the structure and content of the response body for accuracy, ensuring the integrity of the data and preventing potential issues downstream.\n5. **Header verification:** We'll confirm the presence and correct values of specific headers in the response, enabling secure and well-structured communication between your app and its users.\n    \n\n## **Using this collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n**Step 4:** Run the collection by selecting \"Run\".\n\n### Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6988339"
	},
	"item": [
		{
			"name": "data_driven",
			"item": [
				{
					"name": "collection_details_dd",
					"item": [
						{
							"name": "Defined formats are accepted Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Verify format is ${pm.iterationData.get(\"contentType\")}`, function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(pm.iterationData.get(\"contentType\"));",
											" });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1&format={{format}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": "{{format}}"
										}
									]
								},
								"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "scenario_based",
			"item": [
				{
					"name": "collection",
					"item": [
						{
							"name": "Status Code 200 verification Collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Status Code 401 Invalid Key verification Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body contains 'Invalid key'\", function() { ",
											"    pm.expect(pm.response.text()).to.include(\"Invalid key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection?p=0&ps=1&key=\"wrongKey\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection"
									],
									"query": [
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "key",
											"value": "\"wrongKey\""
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Status Code 404 Invalid Header Value verification Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Parse de response body als JSON",
											"let response = pm.response.json();",
											"",
											"// Controleer of de title gelijk is aan 'not found'",
											"pm.test(\"Title is 'Not Found'\", function () {",
											"    pm.expect(response.title).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection?key={{key}}&p=0&ps=1&format=x",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": "x"
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Status Code 500 Invalid Header Value verification Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection?key={{key}}&p=0&ps=1&format=",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": ""
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Response time <500 ms verification Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify response time is less than 500 ms\", function () {",
											"    pm.response.to.have.status(200);",
											"    const fiveSecondsMs = 500; // 5 seconds in milliseconds",
											"    pm.expect(pm.response.responseTime).to.be.below(fiveSecondsMs);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										}
									]
								},
								"description": "This request has a test asserting that a response is received within a specific time limit (in this case 5 seconds). This is useful for ensuring consistent API performance.\n\nYou can access details of the response, such as response time, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						},
						{
							"name": "Header verification Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify default format is application/json\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											" });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										}
									]
								},
								"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						}
					]
				},
				{
					"name": "collection_details",
					"item": [
						{
							"name": "Status code 200 verification Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.environment.set(\"objectNumber\", \"SP-I-2000\");",
											"// pm.environment.set(\"objectNumber\", \"SK-A-2815\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Status code 401 Invalid Key verification Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Body contains 'Invalid key'\", function() { ",
											"    pm.expect(pm.response.text()).to.include(\"Invalid key\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?p=0&ps=1&key=\"wrongKey\"",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": null,
											"value": "",
											"disabled": true
										},
										{
											"key": "key",
											"value": "\"wrongKey\""
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Status Code 404 Invalid Header Value verification Collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Parse de response body als JSON",
											"let response = pm.response.json();",
											"",
											"// Controleer of de title gelijk is aan 'not found'",
											"pm.test(\"Title is 'Not Found'\", function () {",
											"    pm.expect(response.title).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1&format=x",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": "x"
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Status Code 500 Invalid Header Value verification Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1&format=",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": ""
										}
									]
								},
								"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
							},
							"response": []
						},
						{
							"name": "Response time <500ms verification Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify response time is less than 5 seconds\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										}
									]
								},
								"description": "This request has a test asserting that a response is received within a specific time limit (in this case 5 seconds). This is useful for ensuring consistent API performance.\n\nYou can access details of the response, such as response time, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						},
						{
							"name": "Header verification Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify response headers Content-Type contains application/json\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											" });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										}
									]
								},
								"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						},
						{
							"name": "Result accepts xml Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify format is application/xml\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/xml\");",
											" });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1&format=xml",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": "xml"
										}
									]
								},
								"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						},
						{
							"name": "Result accepts jsonp Collection Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify format is application/jsonp\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/javascript\");",
											" });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1&format=jsonp",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										},
										{
											"key": "format",
											"value": "jsonp"
										}
									]
								},
								"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
							},
							"response": []
						},
						{
							"name": "JSON schema verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Importeer de AJV JSON Schema validator",
											"const Ajv = require('ajv');",
											"const ajv = new Ajv();",
											"",
											"// JSON Schema definitie",
											"const schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"elapsedMilliseconds\": { \"type\": \"integer\" },",
											"        \"artObject\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"colors\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"percentage\": { \"type\": \"integer\" },",
											"                            \"hex\": { ",
											"                                \"type\": \"string\",",
											"                                \"pattern\": \"^\\\\s*#([A-Fa-f0-9]{6})\\\\s*$\"",
											"                            }",
											"                        },",
											"                        \"required\": [\"percentage\", \"hex\"]",
											"                    }",
											"                }",
											"            },",
											"            \"required\": [\"colors\"]",
											"        }",
											"    },",
											"    \"required\": [\"elapsedMilliseconds\", \"artObject\"]",
											"};",
											"",
											"// Verkrijg de JSON-respons",
											"let response = pm.response.json();",
											"",
											"// Test that the response matches the expected schema using built-in schema verification",
											"pm.test('response matches JSON schema', () => {",
											"    let validate = ajv.compile(schema);",
											"    let valid = validate(response);",
											"",
											"    pm.response.to.have.status(200);",
											"",
											"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/{{culture}}/collection/{{objectNumber}}?key={{key}}&p=0&ps=1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"{{culture}}",
										"collection",
										"{{objectNumber}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{key}}"
										},
										{
											"key": "p",
											"value": "0"
										},
										{
											"key": "ps",
											"value": "1"
										}
									]
								},
								"description": "This request has a test using Postman's built-in support for JSON Schema verification to ensure that the response data matches the expected shape.\n\nSchema validation can be used to verify your API returns data in the right format, without worrying about the exact values. This might be helpful when testing various inputs for a consistent output format.\n\nLearn more about JSON Schema at [https://json-schema.org](https://json-schema.org/.)."
							},
							"response": []
						}
					]
				},
				{
					"name": "collection_image",
					"item": []
				},
				{
					"name": "usersets",
					"item": []
				},
				{
					"name": "userset_details",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}