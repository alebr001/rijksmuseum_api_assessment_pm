{"uid":"5c2186bed5d0fd6","name":"Status Code 200 verification Collection","fullName":"Regression_Testing/scenario_based/collection#Status Code 200 verification Collection","historyId":"da2603c029d36b3abb6448d0f7c84ca2:e73dd70d5f5977cd852d33a62104475f","time":{"start":1736704879541,"stop":1736704881576,"duration":2035},"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","steps":[{"name":"Status code is 200","time":{"start":1736704881567,"stop":1736704881568,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"a7f1d2dcef99505b","name":"Request Headers","source":"a7f1d2dcef99505b.json","type":"application/json","size":270},{"uid":"e35383067e60bb54","name":"Response Headers","source":"e35383067e60bb54.json","type":"application/json","size":513},{"uid":"50902507711b14f9","name":"Response Body","source":"50902507711b14f9.txt","type":"text/plain","size":20891}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"newman"},{"name":"host","value":"fv-az1676-329"},{"name":"thread","value":"pid-1857-worker-main"},{"name":"parentSuite","value":"Regression_Testing"},{"name":"suite","value":"scenario_based"},{"name":"subSuite","value":"collection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"GET - https://www.rijksmuseum.nl/api/NL/collection?key=0fiuZFh4&p=0&ps=1"},{"name":"Response Code","value":"200"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":4},"items":[{"uid":"23573a73a51d36a5","reportUrl":"https://alebr001.github.io/rijksmuseum_api_assessment_pm/61//#testresult/23573a73a51d36a5","status":"passed","time":{"start":1736704477610,"stop":1736704479496,"duration":1886}},{"uid":"f926b1b3e948d2b","reportUrl":"https://alebr001.github.io/rijksmuseum_api_assessment_pm/60//#testresult/f926b1b3e948d2b","status":"failed","statusDetails":"Status code is 200","time":{"start":1736694423068,"stop":1736694424142,"duration":1074}},{"uid":"9e18caa70cf59766","reportUrl":"https://alebr001.github.io/rijksmuseum_api_assessment_pm/59//#testresult/9e18caa70cf59766","status":"failed","statusDetails":"Status code is 200","time":{"start":1736693195063,"stop":1736693195772,"duration":709}}]},"tags":[]},"source":"5c2186bed5d0fd6.json","parameterValues":["GET - https://www.rijksmuseum.nl/api/NL/collection?key=0fiuZFh4&p=0&ps=1","200"]}