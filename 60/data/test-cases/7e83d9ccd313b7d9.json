{"uid":"7e83d9ccd313b7d9","name":"Status Code 401 Invalid Key verification Collection","fullName":"Regression_Testing/scenario_based/collection#Status Code 401 Invalid Key verification Collection","historyId":"de538b2f02a8029f49325d05ffcd5052:01d13a4ea924e0d5cab704a491bd41d0","time":{"start":1736694424146,"stop":1736694424341,"duration":195},"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","descriptionHtml":"The test on this request asserts that the reponse has a \"200 OK\" status.<br><br>You can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response.","status":"passed","steps":[{"name":"Status code is 401","time":{"start":1736694424338,"stop":1736694424338,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Body contains 'Invalid key'","time":{"start":1736694424339,"stop":1736694424339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"8cfc4e38ee79200c","name":"Request Headers","source":"8cfc4e38ee79200c.json","type":"application/json","size":270},{"uid":"e1f6d9767915a417","name":"Response Headers","source":"e1f6d9767915a417.json","type":"application/json","size":444},{"uid":"5fc3c35f00b63a3e","name":"Response Body","source":"5fc3c35f00b63a3e.txt","type":"text/plain","size":11}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"newman"},{"name":"host","value":"fv-az1288-865"},{"name":"thread","value":"pid-1882-worker-main"},{"name":"parentSuite","value":"Regression_Testing"},{"name":"suite","value":"scenario_based"},{"name":"subSuite","value":"collection"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Request","value":"GET - https://www.rijksmuseum.nl/api/NL/collection?p=0&ps=1&key=%22wrongKey%22"},{"name":"Response Code","value":"401"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":2},"items":[{"uid":"31c70ceda856dbc7","reportUrl":"https://alebr001.github.io/rijksmuseum_api_assessment_pm/59//#testresult/31c70ceda856dbc7","status":"passed","time":{"start":1736693195778,"stop":1736693195917,"duration":139}}]},"tags":[]},"source":"7e83d9ccd313b7d9.json","parameterValues":["GET - https://www.rijksmuseum.nl/api/NL/collection?p=0&ps=1&key=%22wrongKey%22","401"]}